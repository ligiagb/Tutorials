package main

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

//Set up JSON
type MalwareJSON struct {
	Status string `json:"status"`
}

//saving url trimmed to make things easier
func FixupUrl(url string) string {
	trimmedurl := strings.TrimLeft(url, "/")
	return trimmedurl
}

//Search for cached URLs, if yes - makes JSON (status:bad)
//else if - Flagged URL response - makes JSON (status:bad)
//else - Not flagged - return 404
func MalwareResponse(w http.ResponseWriter, r *http.Request) {

	url := FixupUrl(r.URL.Path)

	if SearchCache(url) == true {
		response := MalwareJSON{Status: "bad"}
		if err := json.NewEncoder(w).Encode(response); err != nil {
			panic(err)
		}
	} else if MalwareURLs(url) == true {
		response := MalwareJSON{Status: "bad"}
		if err := json.NewEncoder(w).Encode(response); err != nil {
			panic(err)
		}
		UpdateCache(url, true)
	} else {
		http.Error(w, http.StatusText(404), 404)
	}
}

// creating map to cache URLs
var cache = make(map[string]bool)

//adding URLs to maps
func UpdateCache(url string, value bool) {
	cache[url] = value
}

// return true if URL is cached
func SearchCache(url string) bool {
	return cache[url]
}

//routes for URLS setup
func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	{

		router.
			PathPrefix("/").
			HandlerFunc(MalwareResponse)
	}

	return router
}

func main() {

	// call handleRequests function
	router := NewRouter()
	log.Fatal(http.ListenAndServe(":8081", router))

}
