package main

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

// function - is URL bad? If it' in the list - bad, if not -good

//Set up JSON
type MalwareJSON struct {
	Status string `json:"status"`
}

//Bad URL response - makes JSON (status:bad)
func SearchURL(url string) bool {
	foundMatch := false
	for _, route := range routes {
		if url == route.Pattern {
			foundMatch = true
			break
		}
	}
	return foundMatch
}

func MalwareResponse(w http.ResponseWriter, r *http.Request) {
	// response := MalwareJSON{Status: "bad"}
	if SearchURL(r.URL.Path) == true {
		response := MalwareJSON{Status: "bad"}
		json.NewEncoder(w).Encode(response)
	} else {
		http.Error(w, http.StatusText(404), 404)
	}
}

//list of badURLs
type Route struct {
	Pattern string
}
type Routes []Route

var routes = Routes{
	Route{"/Malwares"},
	Route{"/urlinfo/1/capacitacion.inami.gob.mx/capa.exe"},
	Route{"/Dontgothere"},
}

//routes for URLS setup
func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	{

		router.
			PathPrefix("/").
			HandlerFunc(MalwareResponse)
	}

	return router
}

//Function handleRequests - if bad return JSON
func handleRequests() {
	//http.Error(w, http.StatusText(404), 404)
	router := NewRouter()
	log.Fatal(http.ListenAndServe(":8081", router))

}

func main() {

	// call handleRequests function
	handleRequests()

}
