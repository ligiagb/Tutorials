package main

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/gorilla/mux"
)

// function - is URL bad? If it' in the list - bad, if not -good

//Set up JSON
type MalwareJSON struct {
	Status string `json: "status"`
}

//Bad URL response - makes JSON (status:bad)
func MalwareResponse(w http.ResponseWriter, r *http.Request) {
	response := MalwareJSON{Status: "bad"}
	//		MalwareJSON{Status: "bad"},
	//	}
	json.NewEncoder(w).Encode(response)
}

//type Responses := MalwareJSON

//list of badURLs
type Route struct {
	Pattern string
}
type Routes []Route

var routes = Routes{
	Route{
		"/Malwares",
	},
	Route{
		"/urlinfo/1/capacitacion.inami.gob.mx/capa.exe",
	},
	Route{
		"/Dontgothere",
	},
}

//routes for URLS setup
func NewRouter() *mux.Router {

	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {

		router.
			Path(route.Pattern).
			HandlerFunc(MalwareResponse)
	}

	return router
}

//and the handler
func Logger(inner http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		inner.ServeHTTP(w, r)

		log.Printf(
			r.RequestURI,
		)
	})
}

//Function handleRequests - if bad return JSON
func handleRequests() {
	router := NewRouter()
	log.Fatal(http.ListenAndServe(":8081", router))
}

func main() {

	// call handleRequests function
	handleRequests()
}
